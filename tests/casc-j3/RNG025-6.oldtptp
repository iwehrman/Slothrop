%------------------------------------------------------------------------------
% File     : RNG025-6 : TPTP v3.2.0. Released v1.0.0.
% Domain   : Ring Theory (Alternative)
% Problem  : Middle or Flexible Law
% Version  : [Ste87] (equality) axioms.
%            Theorem formulation : In terms of associators
% English  : 

% Refs     : [Ste87] Stevens (1987), Some Experiments in Nonassociative Rin
%          : [Ste92] Stevens (1992), Unpublished Note
% Source   : [TPTP]
% Names    : 

% Status   : Unsatisfiable
% Rating   : 0.29 v3.1.0, 0.44 v2.7.0, 0.36 v2.6.0, 0.67 v2.5.0, 0.75 v2.4.0, 0.33 v2.2.1, 0.89 v2.2.0, 0.86 v2.1.0, 0.88 v2.0.0
% Syntax   : Number of clauses     :   16 (   0 non-Horn;  16 unit;   1 RR)
%            Number of atoms       :   16 (  16 equality)
%            Maximal clause size   :    1 (   1 average)
%            Number of predicates  :    1 (   0 propositional; 2-2 arity)
%            Number of functors    :    8 (   3 constant; 0-3 arity)
%            Number of variables   :   27 (   2 singleton)
%            Maximal term depth    :    5 (   2 average)

% Comments : 
%          : tptp2X -f oldtptp RNG025-6.p 
%------------------------------------------------------------------------------
input_clause(left_additive_identity,axiom,
    [++equal(add(additive_identity,X),X)]).

input_clause(right_additive_identity,axiom,
    [++equal(add(X,additive_identity),X)]).

input_clause(left_multiplicative_zero,axiom,
    [++equal(multiply(additive_identity,X),additive_identity)]).

input_clause(right_multiplicative_zero,axiom,
    [++equal(multiply(X,additive_identity),additive_identity)]).

input_clause(left_additive_inverse,axiom,
    [++equal(add(additive_inverse(X),X),additive_identity)]).

input_clause(right_additive_inverse,axiom,
    [++equal(add(X,additive_inverse(X)),additive_identity)]).

input_clause(additive_inverse_additive_inverse,axiom,
    [++equal(additive_inverse(additive_inverse(X)),X)]).

input_clause(distribute1,axiom,
    [++equal(multiply(X,add(Y,Z)),add(multiply(X,Y),multiply(X,Z)))]).

input_clause(distribute2,axiom,
    [++equal(multiply(add(X,Y),Z),add(multiply(X,Z),multiply(Y,Z)))]).

input_clause(commutativity_for_addition,axiom,
    [++equal(add(X,Y),add(Y,X))]).

input_clause(associativity_for_addition,axiom,
    [++equal(add(X,add(Y,Z)),add(add(X,Y),Z))]).

input_clause(right_alternative,axiom,
    [++equal(multiply(multiply(X,Y),Y),multiply(X,multiply(Y,Y)))]).

input_clause(left_alternative,axiom,
    [++equal(multiply(multiply(X,X),Y),multiply(X,multiply(X,Y)))]).

input_clause(associator,axiom,
    [++equal(associator(X,Y,Z),add(multiply(multiply(X,Y),Z),additive_inverse(multiply(X,multiply(Y,Z)))))]).

input_clause(commutator,axiom,
    [++equal(commutator(X,Y),add(multiply(Y,X),additive_inverse(multiply(X,Y))))]).

input_clause(prove_flexible_law,conjecture,
    [--equal(associator(x,y,x),additive_identity)]).
%------------------------------------------------------------------------------
